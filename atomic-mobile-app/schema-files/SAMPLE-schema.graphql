type Activity @model(subscriptions: null) @auth(rules: [{allow: owner}, {allow: groups, groups: ["Users"], operations: [read]}]) {
  id: ID!
  userId: ID! @index(name: "byUser", queryField: "listActivitiesByUser", sortKeyFields: ["date"])
  date: String!
  senderId: ID!
  activity: ActivityType!
  objectId: ID
  sendername: String!
  ttl: Int
}

enum ActivityType {
  COMMENT
  LIKE
  FOLLOW
  BOOKMARK
  REPLY
}

type Follower @model(subscriptions: null) @auth(rules: [{allow: groups, groups: ["Managers", "Admin"]}, {allow: groups, groups: ["Users"]}, {allow: owner}]) {
  id: ID!
  userId: ID! @primaryKey(sortKeyFields: ["followerProfileId"])
  followerProfileId: ID! @index(name: "ByFollowerProfileId", queryField: "listUsersByFollowerProfileId", sortKeyFields: ["userId"])
  avatar: String
  isFollower: Boolean
  username: String!
}

type Following @model @auth(rules: [{allow: groups, groups: ["Managers", "Admin"]}, {allow: groups, groups: ["Users"], operations: [read]}, {allow: owner}]) {
  id: ID!
  userId: ID! @index(name: "byUser", queryField: "listFollowingByUser", sortKeyFields: ["followingProfileId"])
  followingProfileId: ID! @index(name: "byFollowingProfileId", queryField: "listUsersByFollowingProfileId", sortKeyFields: ["userId"])
  username: String!
  avatar: String
  isFollowing: Boolean
}

type User @model @auth(rules: [{allow: groups, groups: ["Managers", "Admin"]}, {allow: groups, groups: ["Users"], operations: [read]}, {allow: owner}]) {
  id: ID!
  profileId: ID!
  sub: ID! @index(name: "bySub", queryField: "listUsersBySub")
  email: String
  phoneNumber: String
  name: String
  customerId: String
  timezone: String
  onboard: Boolean
  paymentCards: [Card]
  pushToken: String
}

type Card {
  cardId: ID
  cardBrand: String
  bin: Int
  preferred: Boolean
}

enum Status {
  ACTIVE
  ENDED
}

enum Day {
  MO
  TU
  WE
  TH
  FR
  SA
  SU
}

enum PrimaryGoalType {
  NEWSKILLTYPE
  MEDITATION
  STEP
  STRENGTH
  ENDURANCE
  WEIGHT
  ROUTINE
  HABITTYPE
  TODO
  LIMITTYPE
}

type Goal @model @auth(rules: [{allow: groups, groups: ["Managers", "Admin"]}, {allow: owner}]) {
  id: ID!
  userId: ID! @index(name: "byUserByDate", queryField: "listUserGoalsByDate", sortKeyFields: ["date", "status", "primaryGoalType"])
  date: String!
  status: Status!
  endDate: String!
  primaryGoalType: PrimaryGoalType!
  secondaryGoalType: String
  scheduleId: ID
  goal: String
  goalUnit: String
  previousWeek: Int
  ttl: Int
}

type GoalExercise @model @auth(rules: [{allow: groups, groups: ["Managers", "Admin"]}, {allow: owner}]) {
  id: ID!
  userId: ID! @index(name: "byUserByDate", queryField: "listUserGoalExercisesByDate", sortKeyFields: ["date", "status", "primaryGoalType", "secondaryGoalType"])
  date: String!
  status: Status!
  endDate: String!
  primaryGoalType: PrimaryGoalType!
  secondaryGoalType: String!
  scheduleId: ID
  goal: String
  goalUnit: ExerciseGoalPreference
  previousWeek: Int
  ttl: Int
}

type StepData @model @auth(rules: [{allow: groups, groups: ["Managers", "Admin"]}, {allow: groups, groups: ["Users"], operations: [read]}, {allow: owner}]) {
  id: ID!
  date: String!
  userId: ID! @index(name: "byUserByDate", queryField: "stepsDataByUserByDate", sortKeyFields: ["date"])
  steps: Int
  ttl: Int
}

type StrengthData @model @auth(rules: [{allow: groups, groups: ["Managers", "Admin"]}, {allow: owner}]) {
  id: ID!
  userId: ID!
  type: String!
  userIdType: String! @index(name: "byUserByTypeAndDate", queryField: "strengthDataByUserByTypeAndDate", sortKeyFields: ["date"])
  date: String!
  weight: Float!
  weightUnit: String
  reps: Float
  scheduleId: ID
  ttl: Int
}

type EnduranceData @model @auth(rules: [{allow: groups, groups: ["Managers", "Admin"]}, {allow: owner}]) {
  id: ID!
  date: String!
  userId: ID!
  minutes: Float
  reps: Float
  type: String!
  distance: Float
  userIdType: String! @index(name: "byUserByTypeAndDate", queryField: "exerciseDataByUserByTypeAndDate", sortKeyFields: ["date"])
  scheduleId: ID
  ttl: Int
}

enum EnduranceUnit {
  REPS
  MINUTES
  DISTANCE
}

enum StatPreference {
  REPS
  DISTANCE
  KILOS
  POUNDS
}

enum ExerciseGoalPreference {
  REPS
  DISTANCE
  WEIGHT
  MINUTES
}

type WeightData @model @auth(rules: [{allow: groups, groups: ["Managers", "Admin"]}, {allow: owner}]) {
  id: ID!
  date: String!
  userId: ID! @index(name: "byUserByDate", queryField: "weightDataByUserByDate", sortKeyFields: ["date"])
  weight: Float!
  ttl: Int
}

# start here
type NewSkillTypeData @model @auth(rules: [{allow: groups, groups: ["Managers", "Admin"]}, {allow: owner}]) {
  id: ID!
  date: String!
  userId: ID!
  value: Float
  unit: String
  type: String!
  userIdType: String! @index(name: "byUserByTypeAndDate", queryField: "newSkillDataByUserByTypeAndDate", sortKeyFields: ["date"])
  scheduleId: ID
  ttl: Int
}

type HabitTypeData @model @auth(rules: [{allow: groups, groups: ["Managers", "Admin"]}, {allow: owner}]) {
  id: ID!
  date: String!
  userId: ID!
  value: Float
  unit: String
  type: String!
  userIdType: String! @index(name: "byUserByTypeAndDate", queryField: "habitDataByUserByTypeAndDate", sortKeyFields: ["date"])
  scheduleId: ID
  ttl: Int
}

type LimitTypeData @model @auth(rules: [{allow: groups, groups: ["Managers", "Admin"]}, {allow: owner}]) {
  id: ID!
  date: String!
  userId: ID!
  value: Float
  unit: String
  type: String!
  userIdType: String! @index(name: "byUserByTypeAndDate", queryField: "limitDataByUserByTypeAndDate", sortKeyFields: ["date"])
  scheduleId: ID
  ttl: Int
}

type MeditationData @model @auth(rules: [{allow: groups, groups: ["Managers", "Admin"]}, {allow: owner}]) {
  id: ID!
  date: String!
  userId: ID! @index(name: "byUserByDate", queryField: "meditationDataByUserByDate", sortKeyFields: ["date"])
  minutes: Float!
  scheduleId: ID
  ttl: Int
}

type Level @model @auth(rules: [{allow: groups, groups: ["Managers", "Admin"]}, {allow: groups, groups: ["Users"], operations: [read]}, {allow: owner}]) {
  id: ID!
  userId: ID! @index(name: "byUserByGoalType", queryField: "listGoalTypesByUser", sortKeyFields: ["primaryGoalType", "secondaryGoalType", "date"])
  level: Int!
  attempts: Int
  primaryGoalType: PrimaryGoalType!
  secondaryGoalType: String!
  date: String!
}

type Point @model @auth(rules: [{allow: groups, groups: ["Managers", "Admin"]}, {allow: groups, groups: ["Users"], operations: [read]}, {allow: owner}]) {
  id: ID!
  points: Int
  currentPoints: Int
  max: Int
  min: Int
  maxDate: String
  minDate: String
  currentDate: String
  dayCount: Int
}

type UserStat @model @auth(rules: [{allow: groups, groups: ["Managers", "Admin"]}, {allow: groups, groups: ["Users"], operations: [read]}, {allow: owner}]) {
  id: ID!
  primaryGoalType: PrimaryGoalType!
  secondaryGoalType: String
  userId: ID! @index(name: "byUserByPrimaryGoalType", queryField: "listStatsByUser", sortKeyFields: ["primaryGoalType"])
  value: Float!
  currentValue: Float
  max: Float
  min: Float
  maxDate: String
  minDate: String
  currentDate: String
  dayCount: Int
  lastStreakStartDate: String
  lastStreakEndDate: String
  lastStreakValue: Int
  bestStreakStartDate: String
  bestStreakEndDate: String
  bestStreakValue: Int
  ttl: Int
}

enum ExerciseType {
  REPS
  MINUTES
  DISTANCE
  POUNDS
  KILOS
}

type ExerciseRoutine @model(queries: null, subscriptions: null) @auth(rules: [{allow: private}]) {
  id: ID!
  routineId: ID! @index(name: "byRoutine", sortKeyFields: ["exerciseId"])
  exerciseId: ID! @index(name: "byExercise", sortKeyFields: ["routineId"])
  routine: Routine @belongsTo(fields: ["routineId"])
  exercise: Exercise @belongsTo(fields: ["exerciseId"])
}

type Routine @model(subscriptions: null) @auth(rules: [{allow: private}]) {
  id: ID!
  name: ID!
  nId: ID! @index(name: "byName", queryField: "listRoutinesByName", sortKeyFields: ["name"])
  description: String
  exercises: [ExerciseRoutine] @hasMany(indexName: "byRoutine", fields: ["id"])
}

type Exercise @model(subscriptions: null) @auth(rules: [{allow: private}]) {
  id: ID!
  name: ID!
  nId: ID! @index(name: "byName", queryField: "listExerciseByName", sortKeyFields: ["name"])
  type: ExerciseType!
  description: String
  routines: [ExerciseRoutine] @hasMany(indexName: "byExercise", fields: ["id"])
}

type UserExerciseStat @model @auth(rules: [{allow: groups, groups: ["Managers", "Admin"]}, {allow: groups, groups: ["Users"], operations: [read]}, {allow: owner}]) {
  id: ID!
  primaryGoalType: PrimaryGoalType!
  secondaryGoalType: String!
  userId: ID! @index(name: "byUserByPrimaryGoalType", queryField: "listExerciseStatsByUser", sortKeyFields: ["primaryGoalType", "secondaryGoalType"])
  repsValue: Float
  minutesValue: Float
  weightValue: Float
  distanceValue: Float
  currentRepsValue: Float
  currentMinutesValue: Float
  currentDistanceValue: Float
  currentWeightValue: Float
  maxReps: Float
  minReps: Float
  maxRepsDate: String
  minRepsDate: String
  maxMinutes: Float
  minMinutes: Float
  maxMinutesDate: String
  minMinutesDate: String
  maxWeight: Float
  minWeight: Float
  maxWeightDate: String
  minWeightDate: String
  maxDistance: Float
  minDistance: Float
  maxDistanceDate: String
  minDistanceDate: String
  currentDate: String
  dayCount: Int
  unit: String
  statPreference: StatPreference
  lastStreakStartDate: String
  lastStreakEndDate: String
  lastStreakValue: Int
  bestStreakStartDate: String
  bestStreakEndDate: String
  bestStreakValue: Int
  ttl: Int
}

enum ToDoStatus {
  TODO
  DOING
  DONE
}

# mark here 
type DailyToDo @model @auth(rules: [{allow: owner}]) {
  id: ID!
  userId: ID! @index(name: "byUserByDate", queryField: "listDailyTodosByUser", sortKeyFields: ["id"])
  notes: String
  completed: Boolean
  startDate: String
  endDate: String
  completedDate: String
  nextDay: Boolean
  important: Boolean
  date: String
  event: Boolean
  scheduleId: ID
  softDeadline: String
  hardDeadline: String
  recurring: Boolean
  syncId: ID
  syncName: String
  status: ToDoStatus
  parentId: ID
  location: String
  tags: [String]
  heading: String
  order: Int
  eventId: ID
  duration: Int
}

type ScheduleToDo @model @auth(rules: [{allow: owner}]) {
  id: ID!
  taskId: ID!
  status: Status!
  userId: ID! @index(name: "byUserByDate", queryField: "listActiveToDoSchedulesByDate", sortKeyFields: ["date", "status"])
  date: String!
  dayFrequency: Int
  frequency: FREQUENCY!
  interval: Int
  startDate: String
  endDate: String
  byWeekDay: [Day]
  dayReminder: Boolean
  dayReminderTimeRange: [String]
  dayReminderTimes: [String]
  deadlineAlarms: [String]
  ttl: Int
  eventId: ID
}

enum FREQUENCY {
  DAILY
  WEEKLY
  MONTHLY
  YEARLY
}

type MasterToDo @model @auth(rules: [{allow: owner}]) {
  id: ID!
  userId: ID! @index(name: "byUserByDate", queryField: "listMasterTodosByUser", sortKeyFields: ["id"])
  notes: String
  completed: Boolean
  startDate: String
  endDate: String
  completedDate: String
  nextDay: Boolean
  important: Boolean
  date: String
  event: Boolean
  scheduleId: ID
  softDeadline: String
  hardDeadline: String
  recurring: Boolean
  syncId: ID
  syncName: String
  status: ToDoStatus
  parentId: ID
  location: String
  tags: [String]
  heading: String
  order: Int
  eventId: ID
  duration: Int
}

type WeeklyToDo @model @auth(rules: [{allow: owner}]) {
  id: ID!
  userId: ID! @index(name: "byUserByDate", queryField: "listWeeklyTodosByUser", sortKeyFields: ["id"])
  notes: String
  completed: Boolean
  startDate: String
  endDate: String
  completedDate: String
  nextDay: Boolean
  important: Boolean
  date: String
  event: Boolean
  scheduleId: ID
  softDeadline: String
  hardDeadline: String
  recurring: Boolean
  syncId: ID
  syncName: String
  status: ToDoStatus
  parentId: ID
  location: String
  tags: [String]
  heading: String
  order: Int
  eventId: ID
  duration: Int
}

type GroceryToDo @model @auth(rules: [{allow: owner}]) {
  id: ID!
  userId: ID! @index(name: "byUserByDate", queryField: "listGroceryTodosByUser", sortKeyFields: ["id"])
  notes: String
  completed: Boolean
  startDate: String
  endDate: String
  completedDate: String
  nextDay: Boolean
  important: Boolean
  date: String
  event: Boolean
  scheduleId: ID
  softDeadline: String
  hardDeadline: String
  recurring: Boolean
  syncId: ID
  syncName: String
  status: ToDoStatus
  parentId: ID
  location: String
  tags: [String]
  heading: String
  order: Int
  eventId: ID
  duration: Int
}

type Schedule @model @auth(rules: [{allow: groups, groups: ["Managers", "Admin"]}, {allow: groups, groups: ["Users"], operations: [read]}, {allow: owner}]) {
  id: ID!
  primaryGoalType: PrimaryGoalType
  secondaryGoalType: String
  status: Status!
  userId: ID!
  date: String!
  userIdGoal: String! @index(name: "byUserByDate", queryField: "listActiveSchedulesByDate", sortKeyFields: ["date"])
  unit: String
  ttl: Int
  eventId: ID
}

type Streak @model @auth(rules: [{allow: groups, groups: ["Managers", "Admin"]}, {allow: groups, groups: ["Users"], operations: [read]}, {allow: owner, ownerField: "trainerId"}]) {
  id: ID!
  dataType: String
  goalId: ID
  primaryGoalType: PrimaryGoalType!
  secondaryGoalType: String
  userIdGoal: String! @index(name: "ByUser", queryField: "listStreaksByUserAndGoalType", sortKeyFields: ["startDate"])
  userId: ID!
  streak: Int
  startDate: String!
  endDate: String
  lastSyncDate: String
  ttl: Int
}

type RoutineData @model @auth(rules: [{allow: groups, groups: ["Managers", "Admin"]}, {allow: groups, groups: ["Users"], operations: [read]}, {allow: owner}]) {
  id: ID!
  userId: ID!
  date: String!
  userIdType: String! @index(name: "byUserByTypeAndDate", queryField: "routineDataByUserByTypeAndDate", sortKeyFields: ["date"])
  type: String!
  rest: Int
  ttl: Int
}

type UserActivateType @model @auth(rules: [{allow: groups, groups: ["Managers", "Admin"]}, {allow: groups, groups: ["Users"], operations: [read]}, {allow: owner}]) {
  id: ID!
  userId: ID! @index(name: "byUserByGoalType", queryField: "listActivateTypesByUser", sortKeyFields: ["primaryGoalType", "secondaryGoalType"])
  primaryGoalType: PrimaryGoalType!
  secondaryGoalType: String!
  activated: Boolean!
  secondaryGoalName: String
  routineId: String
  exerciseId: String
  unit: String
}


# mark here
type Tag @model(subscriptions: null) @auth(rules: [{allow: private}]) {
  id: ID!
  name: String! @index(name: "byName", queryField: "listTagsByName")
  posts: [Post] @manyToMany(relationName: "PostTag")
}

type Post @model(subscriptions: null) @auth(rules: [{allow: private}]) {
  id: ID!
  dateDay: ID! @index(name: "byDateDay", queryField: "listPostsByDateDay", sortKeyFields: ["date"])
  date: String!
  postUlid: ID! @index(name: "byPostUlid")
  caption: String
  tags: [Tag] @manyToMany(relationName: "PostTag")
  image: String
  userId: ID! @index(name: "byUser", queryField: "listPostsByUserId", sortKeyFields: ["date"])
  likes: [PostLike] @hasMany(indexName: "byPost", fields: ["id"])
  likeCount: Int
  commentCount: Int
  avatar: String
  username: String!
  profileId: ID!
  ttl: Int
}

type PostLike @model(subscriptions: null) @auth(rules: [{allow: groups, groups: ["Managers", "Admin"]}, {allow: groups, groups: ["Users"], operations: [read, update]}, {allow: owner}]) {
  id: ID!
  postId: ID! @index(name: "byPost", queryField: "listPostLikesByPost", sortKeyFields: ["id"])
  userId: ID! @index(name: "byUser", queryField: "listPostLikesByUser", sortKeyFields: ["id"])
  isLike: Boolean
  username: String!
  ttl: Int
}

type UserProfile @model @auth(rules: [{allow: owner}, {allow: groups, groups: ["Managers", "Admin"]}, {allow: groups, groups: ["Users"]}, {allow: public, provider: iam, operations: [read]}]) {
  id: ID!
  avatar: String
  username: String! @index(name: "byUsername", queryField: "listUserProfilesByUserName")
  email: String
  followerCount: Int
  followingCount: Int
  postCount: Int
  bio: String
  userId: ID!
  sub: ID! @index(name: "bySub", queryField: "listUserProfilesBySub")
  Posts: [Post] @hasMany(indexName: "byUser", fields: ["userId"])
  pointId: ID!
}

type SavedPost @model(subscriptions: null) @auth(rules: [{allow: owner}]) {
  id: ID!
  userId: ID! @index(name: "byUser", sortKeyFields: ["date"])
  date: String!
  postId: ID!
  post: Post @hasOne(fields: ["postId"])
}

type Comment @model(subscriptions: null) @auth(rules: [{allow: groups, groups: ["Managers", "Admin"]}, {allow: groups, groups: ["Users"], operations: [read]}, {allow: owner}]) {
  id: ID!
  postId: ID! @index(name: "byPost", queryField: "listCommentsByPost", sortKeyFields: ["date", "id"])
  date: ID!
  content: String!
  userId: ID!
  username: String!
  avatar: String
  profileId: ID!
  replyId: ID
  ttl: Int
}

type Integration @model @auth(rules: [{allow: groups, groups: ["Managers", "Admin"]}, {allow: owner}]) {
  id: ID!
  sub: ID! @index(name: "bySub", queryField: "listIntegrationsBySub")
  token: String
  resource: String
  resourceId: String
  name: String
  tableName: String
}

type RecurrenceRule {
  frequency: String
  endDate: String
  occurrence: Int
  interval: Int
}
    